c
@available
n
Available.exists?(dates: params[:date], train_detail_id: params[:train_id])
n
c
n
passenger
n
berth
n
train
n
payment_intent_id
quit
params[:passenger_id]
params[:passenger_id].to_i
params[:berth_class]
berth
n
berth
train
n
payment_intent_id
quit
Payment.find_by(reservation_id: passenger.reservation.id, passenger_name: passenger.passenger_name, berth: passenger.reservation.berth_class)
Payment.find_by(reservation_id: passenger.reservation.id, passenger_name: passenger.passenger_name)
Payment.find_by(reservation_id: passenger.reservation.id, passenger_name: passenger.passenger_name,
payment
c
n
quit
n
passengers
n
existing_passenger_ids
c
reservation_params
existing_passenger_ids
quit
params[:existing_passenger_ids]&.reject(&:blank?)
existing_passenger_ids
quit
params
reservation_params
reservation_params[:existing_passenger_ids]&.reject(&:blank?)
existing_passenger_ids
c
n
@reservation.email
n
@reservation.email
n
nn
n
quit
n
c
n
quit
n
@reservation
c
quit]
n
quit
n
reservation_params[:existing_passenger_ids]&.reject(&:blank?)
@reservation
existing_passenger_ids
quit
reservation_params[:passengers_attributes].any?.errors.full_messages
reservation_params[:passengers_attributes].any?
reservation_params[:passengers_attributes]
reservation_params[:passengers_attributes].present? && reservation_params[:passengers_attributes].any? { |_, v| v[:passenger_name].present? }
reservation_params[:existing_passenger_ids]&.reject(&:blank?)
quit
params
@reservation.save!
@reservation
params[:reservation][:passengers_attributes].to_h.any?
params[:reservation][:passengers_attributes].any?
params[:reservation][:passengers_attributes]
params[:reservation][:passengers_attributes].present?
params[:reservation][:passengers_attributes]
params[:reservation]
quit
params[:reservation][:passengers_attributes].present? && params[:reservation][:passengers_attributes].to_h.any? { |_, v| v[:passenger_name].present? }
n
params[:reservation][:existing_passenger_ids]&.reject(&:blank?)
quit
n
params[:reservation][:existing_passenger_ids]
params[:reservation][:existing_passenger_ids]&.reject(&:blank?)
 existing_passenger_ids = params[:reservation][:existing_passenger_ids]&.reject(&:blank?)
c
n
c
params[:reservation][:passengers_attributes].any? { |_, v| v[:passenger_name].present? }
params[:reservation][:passengers_attributes].present? 
params[:reservation][params[:reservation][:passengers_attributes]
n
c
n
quit
params[:reservation]
params[:reservation][:existing_passenger_ids]
@reservation
c
n
params[:reservation][:existing_passenger_ids]
        end
          @reservation.passengers << Passenger.find(passenger_id)
        existing_passenger_ids.each do |passenger_id|
        existing_passenger_ids = params[:reservation][:existing_passenger_ids].reject(&:blank?)
if params[:reservation][:existing_passenger_ids].present?
n
c
n
c
n
c
n
 @reservation.date
 @reservation.date,
passenger_nil_seat
n
c
n
n\
n
@reservation.save!
c
n
WaitList.all
n
passenger_nil_seat
n
c
n
passenger_nil_seat
n
passengers_detail
n
passengers_detail
passenger_detail
count
n
@reservation.save!
@reservation
c
n
quit
n
passenger_nil_seat
n
quit
n
quit
@reservation.save!
@reservation
quit
@reservation.save!
c
@reservation.save!
quit
@reservation.save!
@reservation.save
@reservation
quit
@reservation.save!
@reservation
quit
@reservation.save!
@reservation.errors[:passengers_wait_list]
---
In this case, `passengers_wait_list` must be set on the reservation, or the validation will fail.
```
end
  validates :passengers_wait_list, presence: true
  belongs_to :passengers_wait_list
class Reservation < ApplicationRecord
```ruby
If the error is coming from an association, it's often helpful to check the validation on the related model. For example, if `Reservation` has a `belongs_to :passengers_wait_list`, and you encounter a "must exist" error, you might want to check the association in the `Reservation` model:
### 5. **Check Association Validations**:
This tells you which attribute caused the error and what kind of validation failed.
```
}
  phone_number: [{error: :invalid}]
  passengers_wait_list: [{error: :blank}],
{
```ruby
For example, `@reservation.errors.details` might return:
```
(byebug) @reservation.errors.details # provides detailed error information with symbols
(byebug) @reservation.errors.full_messages # prints the error messages
```ruby
Since you're using `byebug`, after calling `save!` and encountering a failure, you can inspect the errors interactively:
### 4. **Debugging in `byebug`**:
```
phone_number: is invalid
passengers_wait_list: must exist
```
This will output something like:
```
end
  puts "#{attribute}: #{message}"
@reservation.errors.each do |attribute, message|
```ruby
You can iterate over the `errors` hash to get a more detailed view of the failed validations:
### 3. **Check Errors by Inspecting the Object's Errors Hash**:
This will return an array of error messages for the `passengers_wait_list` attribute, if any.
```
@reservation.errors[:passengers_wait_list]
```ruby
If you want to check errors for a specific attribute, you can query the errors hash directly:
### 2. **Check Which Attribute Has Errors**:
In this case, you would see that the error is related to the `Passengers wait list` and `Phone number` attributes.
```
["Passengers wait list must exist", "Phone number is invalid"]
```
This will give you a list of errors, with each message specifying the attribute and the reason for the failure. For example:
```
puts @reservation.errors.full_messages # prints the full validation error messages
@reservation.save # returns false if saving fails
```ruby
When an object fails to save, you can inspect the `errors` on that object to see which attribute caused the issue. Rails automatically populates the `errors` attribute with details about any validations that failed.
### 1. **Check Validation Errors on the Model**:
To check which attribute or model a validation error is coming from in Rails, you can use the following techniques:
@reservation.errors.full_messages
@reservation.save!
@reservation
quit
@reservation.save!
n
@reservation
params
quit
quit 
n
passenger
params
n
c
n
nn
n
c
quit
n
count
n
quit
n
count
n
